openapi: "3.1.0"
info:
  title: "hachaton24 API"
  description: "hachaton24 API"
  version: "1.0.0"
servers:
- url: "https://hachaton24"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /ws/{userId}/{businessId}/{vacancyId}:
    get:
      description: ""
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "businessId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "vacancyId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "Connection"
        in: "header"
        required: true
        description: "Websocket Connection parameter"
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        description: "Websocket Upgrade parameter"
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        description: "Websocket Sec-WebSocket-Key parameter"
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /login:
    post:
      description: ""
      requestBody:
        content:
          text/plain:
            schema:
              type: "string"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserIdRole"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not found"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid login"
  /users:
    post:
      description: "Create user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserIdRole"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /users/{id}:
    delete:
      description: "Delete user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Read user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: "Update user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UpdateUser"
  /business:
    post:
      description: "Create user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBusiness"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserIdRole"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /business/{id}:
    delete:
      description: "Delete user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Read user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BusinessDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: "Update user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BusinessDTO"
  /vacancies:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VacancyDTO"
  /vacancy:
    post:
      description: "Create user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VacancyDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
                format: "uuid"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /vacancy/{id}:
    delete:
      description: "Delete user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Read user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VacancyDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: "Update user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VacancyDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VacancyDTO"
  /calendar:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVacancyCalendar"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VacancyCalendarDTO"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /calendar/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Calendar deleted successfully"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Calendar not found"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VacancyCalendarDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Calendar not found"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVacancyCalendar"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Calendar updated successfully"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Calendar not found"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /calendars:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VacancyCalendarDTO"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /slot:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVacancySlotCalendar"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VacancySlotDTO"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /slot/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Slot deleted successfully"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Slot not found"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VacancySlotDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Slot not found"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVacancySlotCalendar"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Slot updated successfully"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Slot not found"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /slots:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VacancySlotDTO"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /defaultMessage:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DefaultMessageDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReactionsVacancyResultDTO"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /message:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReactionsVacancyResultDTO"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /messages/{userId}/{businessId}/{vacancyId}:
    get:
      description: ""
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "businessId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "vacancyId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
                Example#2:
                  value: "Missing or invalid parameters"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MessagesDTO"
  /reaction:
    post:
      description: "reaction on vacancy"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReactionsVacancyDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReactionsVacancyResultDTO"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /reaction/{id}:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReactionsVacancy"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Reaction updated successfully"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Reaction not found"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
  /reactions/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ReactionsVacancyDetailsDTO"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No matching records found"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
components:
  schemas:
    UserIdRole:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        role:
          type: "string"
      required:
      - "role"
    CreateUser:
      type: "object"
      properties:
        login:
          type: "string"
        password:
          type: "string"
      required:
      - "login"
      - "password"
    User:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        login:
          type: "string"
        password:
          type: "string"
        photoUrl:
          type: "string"
        fullName:
          type: "string"
        age:
          type: "integer"
          format: "int32"
        projects:
          type: "string"
        gitlabUrl:
          type: "string"
        githubUrl:
          type: "string"
        aboutUser:
          type: "string"
        targetsInfo:
          type: "string"
        price:
          type: "integer"
          format: "int32"
        criterionsJob:
          type: "string"
        phone:
          type: "string"
        softSkills:
          type: "array"
          items:
            type: "string"
            enum:
            - "Stress"
            - "PRIDE"
            - "GREED"
            - "WRATH"
            - "ENVY"
            - "LUST"
            - "GLUTTONY"
            - "SLOTH"
        hardSkills:
          type: "array"
          items:
            type: "string"
            enum:
            - "REACT"
            - "CSS"
            - "JS"
            - "KOTLIN"
            - "HTML"
            - "POSTGRESQL"
            - "WEBPACK"
            - "JAVA"
            - "PYTHON"
            - "DOCKER"
            - "GIT"
            - "TYPESCRIPT"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        deletedAt:
          type: "string"
          format: "date-time"
      required:
      - "login"
      - "password"
      - "createdAt"
      - "updatedAt"
    UpdateUser:
      type: "object"
      properties:
        photoUrl:
          type: "string"
        fullName:
          type: "string"
        age:
          type: "integer"
          format: "int32"
        projects:
          type: "string"
        gitlabUrl:
          type: "string"
        githubUrl:
          type: "string"
        aboutUser:
          type: "string"
        targetsInfo:
          type: "string"
        price:
          type: "integer"
          format: "int32"
        criterionsJob:
          type: "string"
        phone:
          type: "string"
        softSkills:
          type: "array"
          items:
            type: "string"
            enum:
            - "Stress"
            - "PRIDE"
            - "GREED"
            - "WRATH"
            - "ENVY"
            - "LUST"
            - "GLUTTONY"
            - "SLOTH"
        hardSkills:
          type: "array"
          items:
            type: "string"
            enum:
            - "REACT"
            - "CSS"
            - "JS"
            - "KOTLIN"
            - "HTML"
            - "POSTGRESQL"
            - "WEBPACK"
            - "JAVA"
            - "PYTHON"
            - "DOCKER"
            - "GIT"
            - "TYPESCRIPT"
    CreateBusiness:
      type: "object"
      properties:
        login:
          type: "string"
        password:
          type: "string"
      required:
      - "login"
      - "password"
    BusinessDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        login:
          type: "string"
        password:
          type: "string"
        fullName:
          type: "string"
        photoUrl:
          type: "string"
        companyURL:
          type: "string"
        description:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        deletedAt:
          type: "string"
          format: "date-time"
    VacancyDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        status:
          type: "string"
        position:
          type: "string"
        workFormat:
          type: "string"
        specialization:
          type: "string"
        experience:
          type: "string"
        vacancy:
          type: "string"
        address:
          type: "string"
        softSkills:
          type: "array"
          items:
            type: "string"
            enum:
            - "Stress"
            - "PRIDE"
            - "GREED"
            - "WRATH"
            - "ENVY"
            - "LUST"
            - "GLUTTONY"
            - "SLOTH"
        hardSkills:
          type: "array"
          items:
            type: "string"
            enum:
            - "REACT"
            - "CSS"
            - "JS"
            - "KOTLIN"
            - "HTML"
            - "POSTGRESQL"
            - "WEBPACK"
            - "JAVA"
            - "PYTHON"
            - "DOCKER"
            - "GIT"
            - "TYPESCRIPT"
        businessId:
          type: "string"
          format: "uuid"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        deletedAt:
          type: "string"
          format: "date-time"
      required:
      - "businessId"
    WorkingDay:
      type: "object"
      properties:
        day:
          type: "string"
          enum:
          - "MONDAY"
          - "TUESDAY"
          - "WEDNESDAY"
          - "THURSDAY"
          - "FRIDAY"
          - "SATURDAY"
          - "SUNDAY"
      required:
      - "day"
    CreateVacancyCalendar:
      type: "object"
      properties:
        duration:
          type: "number"
          format: "double"
        freeTime:
          type: "number"
          format: "double"
        dayStart:
          type: "number"
          format: "double"
        dayEnd:
          type: "number"
          format: "double"
        maxReservDays:
          type: "integer"
          format: "int32"
        workingDays:
          type: "array"
          items:
            $ref: "#/components/schemas/WorkingDay"
        businessId:
          type: "string"
          format: "uuid"
        userId:
          type: "string"
          format: "uuid"
      required:
      - "workingDays"
    VacancyCalendarDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        duration:
          type: "number"
          format: "double"
        freeTime:
          type: "number"
          format: "double"
        dayStart:
          type: "number"
          format: "double"
        dayEnd:
          type: "number"
          format: "double"
        slots:
          type: "integer"
          format: "int32"
        maxReserveDays:
          type: "integer"
          format: "int32"
        workingDays:
          type: "array"
          items:
            $ref: "#/components/schemas/WorkingDay"
        businessId:
          type: "string"
          format: "uuid"
        userId:
          type: "string"
          format: "uuid"
    CreateVacancySlotCalendar:
      type: "object"
      properties:
        slot:
          type: "integer"
          format: "int32"
        free:
          type: "boolean"
        userId:
          type: "string"
          format: "uuid"
        communication:
          type: "string"
        acceptingByUser:
          type: "boolean"
        vacancyId:
          type: "string"
          format: "uuid"
        dayOfWeek:
          type: "string"
          enum:
          - "MONDAY"
          - "TUESDAY"
          - "WEDNESDAY"
          - "THURSDAY"
          - "FRIDAY"
          - "SATURDAY"
          - "SUNDAY"
        date:
          type: "string"
      required:
      - "communication"
      - "vacancyId"
      - "dayOfWeek"
      - "date"
    VacancySlotDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        slot:
          type: "integer"
          format: "int32"
        free:
          type: "boolean"
        userId:
          type: "string"
          format: "uuid"
        communication:
          type: "string"
        acceptingByUser:
          type: "boolean"
        vacancyId:
          type: "string"
          format: "uuid"
        dayOfWeek:
          type: "string"
          enum:
          - "MONDAY"
          - "TUESDAY"
          - "WEDNESDAY"
          - "THURSDAY"
          - "FRIDAY"
          - "SATURDAY"
          - "SUNDAY"
        date:
          type: "string"
      required:
      - "communication"
      - "vacancyId"
      - "dayOfWeek"
      - "date"
    DefaultMessageDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        businessId:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        message:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        deletedAt:
          type: "string"
          format: "date-time"
      required:
      - "businessId"
      - "name"
      - "message"
    ReactionsVacancyResultDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        message:
          type: "string"
      required:
      - "id"
      - "message"
    MessageDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        reactionsVacancyId:
          type: "string"
          format: "uuid"
        senderType:
          type: "string"
        senderId:
          type: "string"
          format: "uuid"
        message:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        deletedAt:
          type: "string"
          format: "date-time"
      required:
      - "reactionsVacancyId"
      - "senderType"
      - "senderId"
      - "message"
    MessagesDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        senderType:
          type: "string"
        message:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        deletedAt:
          type: "string"
          format: "date-time"
      required:
      - "senderType"
      - "message"
    ReactionsVacancyDTO:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        commentary:
          type: "string"
        invitation:
          type: "boolean"
        control:
          type: "boolean"
        userId:
          type: "string"
          format: "uuid"
        businessId:
          type: "string"
          format: "uuid"
        vacancyId:
          type: "string"
          format: "uuid"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        deletedAt:
          type: "string"
          format: "date-time"
      required:
      - "userId"
      - "businessId"
      - "vacancyId"
    UpdateReactionsVacancy:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        commentary:
          type: "string"
        invitation:
          type: "boolean"
        control:
          type: "boolean"
    ReactionsVacancyDetailsDTO:
      type: "object"
      properties:
        reactionId:
          type: "string"
          format: "uuid"
        userId:
          type: "string"
          format: "uuid"
        businessId:
          type: "string"
          format: "uuid"
        vacancyId:
          type: "string"
          format: "uuid"
        vacancy:
          type: "string"
        position:
          type: "string"
      required:
      - "reactionId"
      - "userId"
      - "businessId"
      - "vacancyId"
      - "vacancy"
      - "position"